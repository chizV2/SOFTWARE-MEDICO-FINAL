package com.example.softmedv5.util

import com.example.softmedv5.modelo.Usuario
import java.time.LocalDateTime

/**
 * Sistema de notificaciones para el personal administrativo
 * Gestiona las notificaciones de nuevos usuarios registrados
 */
class GestorNotificaciones {
    
    companion object {
        private var instancia: GestorNotificaciones? = null
        
        fun obtenerInstancia(): GestorNotificaciones {
            if (instancia == null) {
                instancia = GestorNotificaciones()
            }
            return instancia!!
        }
    }
    
    // Lista de notificaciones pendientes para el personal administrativo
    private val notificacionesPendientes = mutableListOf<NotificacionUsuario>()
    
    /**
     * Notifica al personal administrativo sobre un nuevo usuario registrado
     * @param usuario Usuario reci√©n registrado
     * @param fechaRegistro Fecha y hora del registro
     */
    fun notificarNuevoUsuario(usuario: Usuario, fechaRegistro: LocalDateTime = LocalDateTime.now()) {
        val notificacion = NotificacionUsuario(
            id = generarIdNotificacion(),
            tipo = TipoNotificacion.NUEVO_USUARIO,
            usuario = usuario,
            fechaCreacion = fechaRegistro,
            estado = EstadoNotificacion.PENDIENTE,
            mensaje = generarMensajeNotificacion(usuario),
            requiereAccion = true
        )
        
        notificacionesPendientes.add(notificacion)
        println("üîî Nueva notificaci√≥n: ${notificacion.mensaje}")
    }
    
    /**
     * Obtiene todas las notificaciones pendientes
     * @return Lista de notificaciones pendientes
     */
    fun obtenerNotificacionesPendientes(): List<NotificacionUsuario> {
        return notificacionesPendientes.filter { it.estado == EstadoNotificacion.PENDIENTE }
    }
    
    /**
     * Obtiene todas las notificaciones (pendientes y procesadas)
     * @return Lista completa de notificaciones
     */
    fun obtenerTodasLasNotificaciones(): List<NotificacionUsuario> {
        return notificacionesPendientes.toList()
    }
    
    /**
     * Marca una notificaci√≥n como procesada
     * @param notificacionId ID de la notificaci√≥n
     */
    fun marcarComoProcesada(notificacionId: String) {
        val notificacion = notificacionesPendientes.find { it.id == notificacionId }
        notificacion?.let {
            it.estado = EstadoNotificacion.PROCESADA
            it.fechaProcesamiento = LocalDateTime.now()
        }
    }
    
    /**
     * Obtiene el n√∫mero de notificaciones pendientes
     * @return N√∫mero de notificaciones pendientes
     */
    fun obtenerCantidadNotificacionesPendientes(): Int {
        return notificacionesPendientes.count { it.estado == EstadoNotificacion.PENDIENTE }
    }
    
    /**
     * Genera un mensaje de notificaci√≥n para un nuevo usuario
     * @param usuario Usuario reci√©n registrado
     * @return Mensaje formateado
     */
    private fun generarMensajeNotificacion(usuario: Usuario): String {
        val emoji = when (usuario.obtenerNombreRol()) {
            "Paciente" -> "üë§"
            "M√©dico" -> "üë®‚Äç‚öïÔ∏è"
            "Personal Administrativo" -> "üë©‚Äçüíº"
            else -> "üë§"
        }
        
        return """
            $emoji Nuevo usuario registrado
            
            üìã Informaci√≥n del usuario:
            üë§ Nombre: ${usuario.obtenerNombre()}
            üìß Email: ${usuario.obtenerEmail()}
            üè∑Ô∏è Rol: ${usuario.obtenerNombreRol()}
            üÜî ID: ${usuario.obtenerId()}
            
            ‚ö†Ô∏è Requiere gesti√≥n administrativa:
            ‚Ä¢ Verificar informaci√≥n personal
            ‚Ä¢ Completar datos faltantes
            ‚Ä¢ Validar documentos
            ‚Ä¢ Asignar permisos espec√≠ficos
        """.trimIndent()
    }
    
    /**
     * Genera un ID √∫nico para la notificaci√≥n
     * @return ID √∫nico
     */
    private fun generarIdNotificacion(): String {
        return "NOTIF-${System.currentTimeMillis()}"
    }
    
    /**
     * Limpia las notificaciones procesadas antiguas
     * @param diasAntiguedad N√∫mero de d√≠as para considerar una notificaci√≥n como antigua
     */
    fun limpiarNotificacionesAntiguas(diasAntiguedad: Int = 30) {
        val fechaLimite = LocalDateTime.now().minusDays(diasAntiguedad.toLong())
        notificacionesPendientes.removeAll { 
            it.estado == EstadoNotificacion.PROCESADA && 
            it.fechaProcesamiento != null && 
            it.fechaProcesamiento!!.isBefore(fechaLimite)
        }
    }
}

/**
 * Clase que representa una notificaci√≥n de usuario
 */
data class NotificacionUsuario(
    val id: String,
    val tipo: TipoNotificacion,
    val usuario: Usuario,
    val fechaCreacion: LocalDateTime,
    var estado: EstadoNotificacion,
    val mensaje: String,
    val requiereAccion: Boolean,
    var fechaProcesamiento: LocalDateTime? = null
)

/**
 * Tipos de notificaci√≥n
 */
enum class TipoNotificacion {
    NUEVO_USUARIO,
    ACTUALIZACION_DATOS,
    SOLICITUD_CITA,
    DOCUMENTO_PENDIENTE
}

/**
 * Estados de notificaci√≥n
 */
enum class EstadoNotificacion {
    PENDIENTE,
    PROCESADA,
    CANCELADA
} 